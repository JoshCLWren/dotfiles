export PATH="/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/homebrew/bin:/Users/joshwren/.cargo/bin:/Users/joshwren/.pyenv/bin:/Users/joshwren/google-cloud-sdk/bin:/Users/joshwren/bin:/opt/homebrew/opt/fzf/bin:/opt/homebrew/opt/curl/bin:/opt/homebrew/opt/unzip/bin:/Users/josh.wren/.local/bin:/usr/local/bin/redcli:/Users/josh.wren/dotfiles-local/zsh-git-prompt/src/.bin"
source /opt/homebrew/share/powerlevel10k/powerlevel10k.zsh-theme
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
export EDITOR="code -w"
# Add paths to the PATH variable
path=(
    "$path[@]"
    "/opt/homebrew/opt/curl/bin"
    "/opt/homebrew/opt/unzip/bin"
    "$(go env GOPATH)/bin"
    "/Users/josh.wren/.local/bin"
    "/usr/local/bin/redcli"
    "/Users/josh.wren/dotfiles-local/zsh-git-prompt/src/.bin"
)

export USE_GKE_GCLOUD_AUTH_PLUGIN=True
export GOROOT=/opt/homebrew/bin/go
# export LDFLAGS="-L/opt/homebrew/lib"
# export CPPFLAGS="-I/opt/homebrew/include"
alias pycharm='open -a "/Users/joshwren/Applications/PyCharm Professional.app"'
alias be='bundle exec'
alias status='git status'
alias commit='git commit'
alias add='git add .'
alias rspec='bundle exec rspec'
alias refresh='exec zsh'
alias bug='pytest -sxv tests --last-failed --pdb'
alias mouse='tmux set mouse'
alias mikey='mikeybuild --aiohttp --spec ~/Code/Youversion/service-specs/services/organizations/index.yaml --app-path ~/Code/Youversion/'
alias sniff="sniffer -x tests"
alias gagrc='git add .; git rebase --continue'
alias new='git checkout -b'
alias z='vim  ~/dotfiles/zshrc.local'
alias you='cd ~/Code/YouVersion/'
alias nyan='cd ~/go-nyancat && ./go-nyancat | lolcat'
alias gl="git log --oneline --decorate --graph -10"
alias build="red; mikey; make tests"
alias gti='git'
alias bu="brew update"
alias _rebase='git pull origin main --rebase'
alias k='kubectl'
function killport() {
    if [ $# -eq 0 ]; then
        echo "usage: killport [port]\nnote: separate multiple ports with comma"
    else
        kill $(lsof -ti:$1)
    fi
}

function findport() {
    if [ $# -eq 0 ]; then
        echo "usage: findport [port]"
    else
        netstat -vanp tcp | grep $1
    fi
}

function redspec() {
    if [ $# -eq 0 ]; then
        echo "usage: redspec [service-name]"
    else
        redcli $1 .
    fi
}

function git-cleanup() {
    git branch --merged | egrep -v "(^\*|master|develop|main)" | xargs -n 1 git branch -d
}

function git-delete-all-branches() {
    git branch | egrep -v "(^\*|master|develop|main)" | xargs -n 1 git branch -D
}

kube-get-pod() {
    kubectl get pods --no-headers |
        fzf \
            --bind="ctrl-r:reload(kubectl get pods --no-headers)" \
            --header="$P9K_KUBECONTEXT_NAME/$P9K_KUBECONTEXT_NAMESPACE (Press CTRL-R to reload)" \
            --height=25% |
        grep -o -E '^[^ ]+'
}

kube-pod-widget() {
    local pod=$(kube-get-pod | join-lines)
    zle reset-prompt
    LBUFFER+=$pod
}

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}
if ! command -v kubectl &>/dev/null; then
    echo "kubectl is not installed. Please install it."
    # You can add the installation command or guide here if needed
fi
if ! command -v fzf &>/dev/null; then
    echo "fzf is not installed. Please install it."
    # You can add the installation command or guide here if needed
fi

zle -N kube-pod-widget
bindkey '^k' kube-pod-widget
alias kxa='kubectl exec $(kube-get-pod) -c api-app -it -- bash'
alias kx='kubectl exec $(kube-get-pod) -it -- bash'
alias red='redspec organizations'

source ~/dotfiles/evalcache.zsh
source "$HOME/.cargo/env"

function load-pyenv() {
    pyenv virtualenv-init -
}
_evalcache load-pyenv

# Hook direnv into the shell after pyenv is loaded
_evalcache direnv hook zsh
autoload -Uz add-zsh-hook
add-zsh-hook -D precmd _pyenv_virtualenv_hook
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

# source "/opt/homebrew/opt/kube-ps1/share/kube-ps1.sh"
# PS1='$(kube_ps1)'$PS1
# kubeoff
_evalcache /Users/joshwren/Code/youversion/yv/bin/yv init -

source ~/.fzf.zsh

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/joshwren/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/joshwren/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/joshwren/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/joshwren/google-cloud-sdk/completion.zsh.inc'; fi

_evalcache jump shell
_evalcache fnm env --use-on-cd

# function frontmost_app() {
#  osascript -e 'tell application "System Events" to (name of application processes whose frontmost is true)'
# }

# function kubeauth() {
#  local output=$(timeout 5s command kubectl get pods 2>&1)
#  if [[ $output == *"error: You must be logged in to the server"* ]] ||
#   [[ $output == *"the server has asked for the client to provide credentials"* ]] ||
#   [[ $output == *"executable gke-gcloud-auth-plugin failed with exit code 1"* ]]; then
#   gcloud auth login >/dev/null 2>&1 &
#   until [[ $(frontmost_app) != "iTerm2" ]]; do
#    sleep 0.01
#   done
#   open -a iterm
#   wait
#   # next 4 lines close the last open tab in browser
#   local app=$(frontmost_app)
#   osascript -e 'tell application "FireFox" to activate'
#   osascript -e 'tell application "System Events" to keystroke "w" using {command down}'
#   osascript -e "tell application \"$app\" to activate"
#  fi
# }

# function kubectl() {
#  if [[ $1 != "config" ]]; then
#   kubeauth
#  fi
#  command kubectl "$@"
# }

# function kubens() {
#  kubeauth
#  command kubens "$@"
# }

# function yv() {
#  if [[ $1 == "cloudsql" ]]; then
#   kubeauth
#  fi
#  command yv "$@"
# }

# Function to recursively find .python-version from the current directory up to the root
find_python_version_file() {
  local current_dir=$(pwd)

  while [[ "$current_dir" != "/" ]]; do
    if [[ -f "$current_dir/.python-version" ]]; then
      echo "$current_dir/.python-version"
      return 0
    fi
    current_dir=$(dirname "$current_dir")
  done

  return 1
}

# Function to check for .python-version and activate or deactivate pyenv
auto_pyenv_activate_or_deactivate() {
  local python_version_file=$(find_python_version_file)

  if [[ -n "$python_version_file" ]]; then
    local version
    version=$(cat "$python_version_file")
    # Check if the version is installed
    if pyenv versions --bare | grep -qx "$version"; then
      echo "Activating Python $version from $python_version_file"
      pyenv activate "$version" 2>/dev/null || pyenv local "$version"
    else
      echo "Python version $version not installed. Consider installing it with 'pyenv install $version'"
    fi
  else
    echo "No .python-version found, deactivating any active pyenv environment"
    pyenv deactivate  # Reverts to the system Python
  fi
}

# # Store the initial current directory
# last_dir=$PWD

# # Flag to prevent recursion
# in_chpwd=0

# # Function to run every time you change directories
# chpwd() {
#     # Check if already processing a directory change
#     if (( in_chpwd )); then
#         return
#     fi

#     # Set the flag
#     in_chpwd=1

#     # When leaving a directory, stop docker-compose if docker-compose.yaml exists in that directory
#     if [[ -f "$last_dir/docker-compose.yaml" ]]; then
#         docker-compose -f "$last_dir/docker-compose.yaml" stop
#     fi

#     # When entering a directory, if docker-compose.yaml exists, stop all containers and start docker-compose
#     if [[ -f "$PWD/docker-compose.yaml" ]]; then
#         docker stop $(docker ps -a -q)
#         docker-compose -f "$PWD/docker-compose.yaml" start
#     fi

#     # Update the last_dir to the current directory
#     last_dir=$PWD

#     # Reset the flag
#     in_chpwd=0
# }

# Export the function so it's used as a hook
export -f chpwd

# Hook the function to directory changes
autoload -U add-zsh-hook
add-zsh-hook chpwd auto_pyenv_activate_or_deactivate

# Initial check in case you start in a directory with .python-version
auto_pyenv_activate_or_deactivate
export GOROOT=/opt/homebrew/Cellar/go/1.22.0/libexec
export LEFTHOOK=0


yvba() {
    local target_machine="gitlab.com"
    local login=$(awk -v machine="$target_machine" '
    $1 == "machine" && $2 == machine {found=1}
    found && $1 == "login" {print $2; found=0}    ' ~/.netrc)
    local password=$(awk -v machine="$target_machine" '
    $1 == "machine" && $2 == machine {found=1}        found && $1 == "password" {print $2; found=0}    ' ~/.netrc)
    local build_args=(        "--build-arg GITLAB_REPO_USERNAME=${login}"
    "--build-arg GITLAB_REPO_TOKEN=${password}"
    "--build-arg GITLAB_USER=${login}"
    "--build-arg GITLAB_PASSWORD=${password}"
    "--build-arg PYPI_USERNAME=${login}"
    "--build-arg PYPI_PASSWORD=${password}"
    "--build-arg YV_DOCKER_CACHE=${YV_DOCKER_CACHE}"
    "--build-arg YV_REGISTRY=${YV_REGISTRY}"    )
    for arg in "$@"; do
    build_args+=("--build-arg $arg")
    done
    echo "${build_args[@]}"
    }

export PATH="$HOME/bin:$PATHi"